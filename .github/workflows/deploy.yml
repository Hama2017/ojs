name: Deploy to Production

# D√©clenchement manuel + automatique
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
  push:
    branches:
      - main                    # D√©clenche sur push vers main
    tags:
      - 'v*'                   # D√©clenche sur tags version (v1.0.0, v1.2.0, etc.)
    paths:
      - 'plugins/generic/premiumSubmissionHelper/**'  # Seulement si le plugin change

jobs:
  deploy:
    name: Deploy Plugin to OJS Server
    runs-on: ubuntu-latest
    environment: production  # Environment fixe, on d√©termine la logique dans les steps
    
    steps:
    # D√©terminer l'environnement selon le d√©clencheur
    - name: Determine environment
      id: determine_env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "trigger=manual" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "trigger=tag" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "trigger=branch" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "trigger=fallback" >> $GITHUB_OUTPUT
        fi
        
    # Afficher les informations de d√©ploiement
    - name: Show deployment info
      run: |
        echo "üöÄ Deployment triggered by: ${{ steps.determine_env.outputs.trigger }}"
        echo "üìç Environment: ${{ steps.determine_env.outputs.environment }}"
        echo "üîó Ref: ${{ github.ref }}"
        
    # √âtape 1: R√©cup√©rer le code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # √âtape 2: Pr√©parer les fichiers pour d√©ploiement
    - name: Prepare deployment files
      run: |
        echo "üì¶ Preparing plugin files for deployment..."
        
        # Cr√©er le dossier de destination
        mkdir -p deployment/premiumSubmissionHelper
        
        # V√©rifier que le plugin existe
        if [ ! -d "plugins/generic/premiumSubmissionHelper" ]; then
          echo "‚ùå Plugin directory not found!"
          exit 1
        fi
        
        # Copier SEULEMENT les fichiers du plugin
        cp -r plugins/generic/premiumSubmissionHelper/* deployment/premiumSubmissionHelper/
        
        # V√©rifier le contenu
        echo "üìÇ Plugin files to deploy:"
        ls -la deployment/premiumSubmissionHelper/
        echo ""
        echo "üìä Total files: $(find deployment/premiumSubmissionHelper -type f | wc -l)"
        
    # √âtape 3: Cr√©er une archive
    - name: Create deployment archive
      run: |
        cd deployment
        tar -czf premiumSubmissionHelper.tar.gz premiumSubmissionHelper/
        echo "‚úÖ Archive created: $(ls -lh premiumSubmissionHelper.tar.gz)"
        
    # √âtape 4: Configurer SSH
    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        # Cr√©er le dossier SSH
        mkdir -p ~/.ssh
        
        # Configurer la cl√© priv√©e (ed25519 compatible)
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Ajouter l'h√¥te aux known_hosts
        ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
        
        # Configurer SSH pour utiliser la cl√© ed25519
        echo "Host $SSH_HOST" >> ~/.ssh/config
        echo "  IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
        echo "  IdentitiesOnly yes" >> ~/.ssh/config
        chmod 600 ~/.ssh/config
        
        echo "üîë SSH configuration completed"
        
    # √âtape 5: Tester la connexion SSH
    - name: Test SSH Connection
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
      run: |
        echo "üîå Testing SSH connection..."
        ssh -o ConnectTimeout=10 $SSH_USER@$SSH_HOST "echo '‚úÖ SSH connection successful'"
        
    # √âtape 6: Backup existant (si pr√©sent)
    - name: Backup existing plugin
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        OJS_PATH: ${{ secrets.OJS_PATH }}
      run: |
        echo "üíæ Creating backup of existing plugin..."
        ssh $SSH_USER@$SSH_HOST "
          if [ -d '$OJS_PATH/plugins/generic/premiumSubmissionHelper' ]; then
            sudo cp -r '$OJS_PATH/plugins/generic/premiumSubmissionHelper' '$OJS_PATH/plugins/generic/premiumSubmissionHelper.backup.$(date +%Y%m%d_%H%M%S)'
            echo '‚úÖ Backup created successfully'
          else
            echo '‚ÑπÔ∏è  No existing plugin found, skipping backup'
          fi
        "
        
    # √âtape 7: D√©ployer le plugin
    - name: Deploy Plugin
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        OJS_PATH: ${{ secrets.OJS_PATH }}
      run: |
        echo "üöÄ Deploying plugin to server..."
        
        # Transf√©rer l'archive
        scp deployment/premiumSubmissionHelper.tar.gz $SSH_USER@$SSH_HOST:/tmp/
        
        # D√©ployer sur le serveur
        ssh $SSH_USER@$SSH_HOST "
          cd /tmp
          
          # Supprimer l'ancien plugin
          sudo rm -rf '$OJS_PATH/plugins/generic/premiumSubmissionHelper'
          
          # Extraire le nouveau plugin
          tar -xzf premiumSubmissionHelper.tar.gz
          
          # D√©placer vers le bon dossier
          sudo mv premiumSubmissionHelper '$OJS_PATH/plugins/generic/'
          
          # D√©finir les bonnes permissions
          sudo chown -R www-data:www-data '$OJS_PATH/plugins/generic/premiumSubmissionHelper'
          sudo chmod -R 755 '$OJS_PATH/plugins/generic/premiumSubmissionHelper'
          
          # Nettoyer les fichiers temporaires
          rm -f premiumSubmissionHelper.tar.gz
          
          echo '‚úÖ Plugin deployed successfully'
        "
        
    # √âtape 8: V√©rifier le d√©ploiement
    - name: Verify Deployment
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        OJS_PATH: ${{ secrets.OJS_PATH }}
      run: |
        echo "üîç Verifying deployment..."
        ssh $SSH_USER@$SSH_HOST "
          if [ -f '$OJS_PATH/plugins/generic/premiumSubmissionHelper/PremiumSubmissionHelperPlugin.php' ]; then
            echo '‚úÖ Plugin main file exists'
            echo 'üìÇ Plugin structure:'
            ls -la '$OJS_PATH/plugins/generic/premiumSubmissionHelper/'
          else
            echo '‚ùå Plugin deployment failed'
            exit 1
          fi
        "
        
    # √âtape 9: Notification de succ√®s
    - name: Deployment Success
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üìä Deployment Summary:"
        echo "  ‚Ä¢ Environment: ${{ steps.determine_env.outputs.environment }}"
        echo "  ‚Ä¢ Trigger: ${{ steps.determine_env.outputs.trigger }}"
        echo "  ‚Ä¢ Branch: ${{ github.ref }}"
        echo "  ‚Ä¢ Commit: ${{ github.sha }}"
        echo "  ‚Ä¢ Deployed by: ${{ github.actor }}"
        echo "  ‚Ä¢ Time: $(date)"