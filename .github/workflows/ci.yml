name: Continuous Integration

# D√©clench√© sur chaque push vers la branche feature
on:
  push:
    branches: [ feat/premium-helper-plugin-hamadouba ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    # √âtape 1: R√©cup√©rer le code
    - name: Checkout code
      uses: actions/checkout@v4
      
    # √âtape 2: Installer PHP
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, json, tokenizer
        tools: composer
        
    # √âtape 3: Installer les d√©pendances
    - name: Install dependencies
      run: |
        # Installer PHP_CodeSniffer globalement
        composer global require "squizlabs/php_codesniffer=*"
        
        # Ajouter composer au PATH
        echo "$HOME/.composer/vendor/bin" >> $GITHUB_PATH
        
    # √âtape 4: V√©rifier l'installation
    - name: Verify CodeSniffer installation
      run: |
        phpcs --version
        phpcs -i
        
    # √âtape 5: Linter le code PHP avec PSR-12
    - name: Run PHP CodeSniffer
      run: |
        # Scanner tous les fichiers PHP avec le standard PSR-12
        phpcs --standard=PSR12 --extensions=php --ignore=vendor/ .
        
    # √âtape 6: Tests additionnels (optionnel)
    - name: Check PHP syntax
      run: |
        # V√©rifier la syntaxe PHP de tous les fichiers
        find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    # Scanner les vuln√©rabilit√©s de s√©curit√©
    - name: Security scan
      run: |
        # Rechercher des patterns de s√©curit√© suspects
        echo "üîç Scanning for potential security issues..."
        
        # Rechercher des tokens API hardcod√©s
        if grep -r "api_key\s*=\s*['\"][^'\"]*['\"]" --include="*.php" . 2>/dev/null; then
          echo "‚ö†Ô∏è  Warning: Potential hardcoded API keys found"
          exit 1
        fi
        
        # Rechercher des mots de passe hardcod√©s
        if grep -r "password\s*=\s*['\"][^'\"]*['\"]" --include="*.php" . 2>/dev/null; then
          echo "‚ö†Ô∏è  Warning: Potential hardcoded passwords found"
          exit 1
        fi
        
        echo "‚úÖ Security scan completed successfully"
